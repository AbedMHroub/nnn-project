let $scope = {},
    $bindedVars, viewElement = document.querySelector("[view]");
class AttrData { constructor(e, t) { this.type = e.replace("\\", "").replace("$", ""), this.query = e, this.render = t } }
class SpecialAttr { constructor(e, t, r) { this.attr = e, this.element = t, this.exp = t.getAttribute("$" + e), this.render = r } }

function renderIf(expression, element) {
    createClass("hide", "display:none");
    let exp = expression.replace(/\$/g, "$scope.");
    if (-1 != exp.indexOf("$scope.i")) return;
    let result = eval(exp);
    result ? element.classList.contains("hide") && element.classList.remove("hide") : element.classList.contains("hide") || (element.className += " hide")
}

function renderFor(exp, element) {
    let def = exp.split(":"),
        iterSymbol = "i";
    def.length > 1 && (iterSymbol = def[1].trim());
    let subArr = def[0].split("of")[0].trim(),
        arrName = def[0].split("of")[1].trim(),
        array = eval("$scope." + arrName);
    if (!array) return;
    let iterregx = new RegExp("\\$" + iterSymbol + "(?![a-z])", "g"),
        newElement = "";
    for (let e = 0; e < array.length; e++) {
        let t = element.innerHTML.replace(new RegExp("[$]" + subArr, "g"), "$" + arrName + `[${e}]`).replace(iterregx, e),
            r = $scope[subArr];
        $scope[subArr] = array[e], $scope[subArr] = r, newElement += t
    }
    element.innerHTML = newElement, renderTemplate(element)
}

function renderDisabled(exp, element) {
    exp = exp.replace(/\$/g, "$scope.");
    let result = eval(exp);
    element.disabled = result
}

function renderStyle(e, t) {
    e.split(",").forEach(e => {
        let r = e.lastIndexOf(":"),
            l = [];
        l.push(e.substring(0, r).replace(/'/g, "").trim(), e.substring(r + 1).trim());
        let n = "mvc" + function(e) { var t = 0; if (0 == e.length) return t; for (var r = 0; r < e.length; r++) t = (t << 5) - t + e.charCodeAt(r), t &= t; return t }(l[0]);
        createClass(n, l[0]), renderClass(`${n} : ${l[1]}`, t)
    })
}

function renderClass(exp, element) {
    exp = exp.replace(/\$/g, "$scope.");
    let expGroup = exp.split(",");
    expGroup.forEach(ele => {
        let splitStr = ele.split(":"),
            className = splitStr[0].replace(/'/g, "").trim();
        eval(splitStr[1]) ? element.classList.add(className) : element.classList.remove(className)
    })
}
const specails = [new AttrData("\\$for", renderFor), new AttrData("\\$if", renderIf), new AttrData("\\$disabled", renderDisabled), new AttrData("\\$style", renderStyle), new AttrData("\\$class", renderClass)];

function specialTags(e) {
    let t = [];
    for (let r = 0; r < specails.length; r++) {
        let l = e.querySelectorAll(`[${specails[r].query}]`);
        l = [...l].map(e => e = new SpecialAttr(specails[r].type, e, specails[r].render)), t = t.concat(l)
    }
    return t
}

function replaceElement(attrString) { let value = attrString.replace("$", "$scope."); return value = eval(value), value || "" }
export function $apply(e) {
    let t;
    e ? t = e.innerHTML : (t = $bindedVars, e = viewElement), t = t.replace(/(\{\{.*?\}\})/g, replaceElement), e.innerHTML = t
}
let cm = new Map;

function createClass(e, t) {
    if (!cm.has(e)) {
        var r = document.createElement("style");
        r.type = "text/css", r.innerHTML = `.${e} { ${t} }`, document.getElementsByTagName("head")[0].appendChild(r), cm.set(e, !0)
    }
}
export function render(e, t) { let r = specialTags(e); return $scope = t, r.forEach(e => e.render(e.exp, e.element)), $bindedVars = e.innerHTML, $apply(e), e }

function renderTemplate(e) { return specialTags(e).forEach(e => e.render(e.exp, e.element)), e }